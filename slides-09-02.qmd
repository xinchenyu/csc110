---
title: "for loops -- iterating over items (slides)"
format: revealjs
slide-number: true
df-print: kable
---

# CSc 110 - the other type of `for` loop

## Review of `for in range():`

```{python}
#| echo: true
#| eval: true
for n in range(5):
  print(n)
```

```{python}
#| echo: true
#| eval: true
numbers = [2, 1, 4, 6, 23, 2]
for i in range(len(numbers)):
  print(numbers[i])
```

## Introducing `for x in string:`

```{python}
#| echo: true
#| eval: true
string = "hello"
for n in string:
  print(n)
```

## Introducing `for x in list:`

```{python}
#| echo: true
#| eval: true
numbers = [2, 1, 4, 6, 23, 2]
for n in numbers:
  print(n)
```


## A Note on two methods

`for i in range(len(list)):` VS. `for x in list:`

-   `option 1` if you want to mutate the value (need index `i`)

```{python}
#| echo: true
#| eval: true
numbers = [2, 1, 4]
for i in range(len(numbers)):
  numbers[i] += 1
numbers
```

-   `both options` if you want to get the value 

```{python}
#| echo: true
#| eval: true
numbers = [2, 1, 4]
for n in numbers:
  print(n)
```


## Write a function

It returns a dictionary that maps each negative value in `numbers` to its frequency in `numbers`. Use `for x in list:`

```{python}
#| eval: false
#| echo: true
assert tally_negatives([1, -2, 0, -4, -2]) == {-2: 2, -4: 1}
assert tally_negatives([]) == {}
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def tally_negatives(numbers):
  tally = {}
  for n in numbers:
    if n < 0:
      if n not in tally:
        tally[n] = 0
      tally[n] += 1
  return tally

def main():
  assert tally_negatives([1, -2, 0, -4, -2]) == {-2: 2, -4: 1}
  assert tally_negatives([]) == {}
  print("Passed all tests.")
  
main()
```


## Iterating a dictionary 

Iterating keys: 
```{python}
#| eval: true
#| echo: true
scores = {'A': 10, 'B': 25, 'C': 27, 'D': 10}
for key in scores:
  print(key)
```

Another option: `dict.keys()`:
```{python}
#| eval: true
#| echo: true
scores = {'A': 10, 'B': 25, 'C': 27, 'D': 10}
for key in scores.keys():
  print(key)
```

## Iterating a dictionary 

Iterating values: `dict.values()`:
```{python}
#| eval: true
#| echo: true
scores = {'A': 10, 'B': 25, 'C': 27, 'D': 10}
for value in scores.values():
  print(value)
```

Iterating both keys and values: `dict.items()`
```{python}
#| eval: true
#| echo: true
scores = {'A': 10, 'B': 25, 'C': 27, 'D': 10}
for key, value in scores.items():
  print(key, value)
```


## Write a function

It returns a list with all the keys and values in the `dictionary`.

Test cases:

```{python}
#| eval: false
#| echo: true
assert keys_and_values({'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}) == \
    ['A', 10, 'B', 25, 'C', 27, 'D', 10, 'E', 5]
```

## Write a function -- solution

```{python}
#| eval: true
#| echo: true
def keys_and_values(dictionary):
  new_list = []
  for key, value in dictionary.items():
    new_list.append(key)
    new_list.append(value)
  return new_list

def main():
  assert keys_and_values({'A': 10, 'B': 25, 'C': 27, 'D': 10, 'E': 5}) == ['A', 10, 'B', 25, 'C', 27, 'D', 10, 'E', 5]
  
main()
```


## Write a function

It mutates `dict_1`, by adding to it all key-values pairs in `dict_2`. If a key is in both dictionaries, the values are added.


Test cases:

```{python}
#| echo: true
#| eval: false
dict_1 = {"a": 20, "e": 5}
dict_2 = {"e": 10, "i": 2}
assert merge_dictionaries(dict_1, dict_2) == {"a": 20, "e": 15, "i": 2}
```

## Write a function -- solution

```{python}
#| echo: true
#| eval: true
def merge_dictionaries(dict_1, dict_2):
  for key, value in dict_2.items():
    if key in dict_1:
      dict_1[key] += value
    else:
      dict_1[key] = value
  return dict_1
      
def main():
  dict_1 = {"a": 20, "e": 5}
  dict_2 = {"e": 10, "i": 2}
  assert merge_dictionaries(dict_1, dict_2) == {"a": 20, "e": 15, "i": 2}
  
main()
```

## Write a function

It mutate the list, multiply every number by 2. It returns the highest value in the mutated list.

Test cases:

```{python}
#| eval: false
#| echo: true
assert max_list([2, 2, 1]) == 4
assert max_list([5, 2, 1]) == 10
assert max_list([]) == None
```

## Write a function -- solution 

```{python}
#| eval: true
#| echo: true
def max_list(numbers):
    max = None
    for i in range(len(numbers)):
        numbers[i] *= 2
    for n in numbers:
        if max == None or n > max:
            max =  n
    return max

def main():
  assert max_list([2, 2, 1]) == 4
  assert max_list([5, 2, 1]) == 10
  assert max_list([]) == None
  print("pass")
  
main()
```

## Write a function -- solution continue

-   line 3: can we use `for x in list`?

-   line 5: can we use `for i in range(len(list))`?
```{python}
#| eval: true
#| echo: true
def max_list(numbers):
    max = None
    for i in range(len(numbers)):
        numbers[i] *= 2
    for n in numbers:
        if max == None or n > max:
            max =  n
    return max
```


## Attendance 

Go to gradescope and answer questions:

-   is the solution correct or not?

-   line 3: can we use `for x in list`?

```{python}
#| eval: true
#| echo: true
def max_list(numbers):
    max = None
    for i in range(len(numbers)):
        numbers[i] *= 2
        if max == None or numbers[i] > max:
            max = numbers[i]
    return max
```