---
title: "decomposition (slides)"
format: revealjs
slide-number: true
df-print: kable
---

# CSc 110 - decomposition


## Program decomposition

Program decomposition refers to the process of breaking down a complex program into smaller, more manageable, and understandable parts or components.

It avoids unnecessary common code and improves the structural quality of code.

## Print a classic guitar

```{python}
#| echo: true
#| eval: false
print("      ___")
print("    o|* *|o")
print("    o|* *|o")
print("    o|* *|o")
print("     \===/")
print("      |||")
print("      |||")
print("   ___|||___")
print("  /   |||   \ ")
print(" /    |||    \ ")
print("|     |||     |")
print(" \   (|||)   /")
print("  |   |||   |")
print("  /   |||   \ ")
print(" /    |||    \ ")
print("/     |||     \ ")
print("|    [===]    |")
print(" \           /")
print("  '.       .'")
print("   '-------'")
```

## Print a retro head guitar

```{python}
#| echo: true
#| eval: false
print("     ._-_.")
print("    +|\G/|+")
print("    +|\./|+")
print("    +|\./|+")
print("     \===/")
print("      |||")
print("      |||")
print("   ___|||___")
print("  /   |||   \ ")
print(" /    |||    \ ")
print("|     |||     |")
print(" \   (|||)   /")
print("  |   |||   |")
print("  /   |||   \ ")
print(" /    |||    \ ")
print("/     |||     \ ")
print("|    [===]    |")
print(" \           /")
print("  '.       .'")
print("   '-------'")
```

## Print a retro head long neck guitar

```{python}
#| echo: true
#| eval: false
print("     ._-_.")
print("    +|\G/|+")
print("    +|\./|+")
print("    +|\./|+")
print("     \===/")
print("      |||")
print("      |||")
print("      |||")
print("      |||")
print("   ___|||___")
print("  /   |||   \ ")
print(" /    |||    \ ")
print("|     |||     |")
print(" \   (|||)   /")
print("  |   |||   |")
print("  /   |||   \ ")
print(" /    |||    \ ")
print("/     |||     \ ")
print("|    [===]    |")
print(" \           /")
print("  '.       .'")
print("   '-------'")
```

## Class activity one

Compare different types of guitar, write your asnwers:

-   which parts of code are the same?

-   which parts of code are different?

## Class activity one -- answers

Classic guitar vs. Retro head guitar:

-   which parts of code are the same?

    -   the neck
    
    -   the body

-   which parts of code are different?

    -   the head: line 1-4
    

## Class activity one -- answers

Retro head guitar vs. Retro head long neck guitar:

-   which parts of code are the same?

    -   the head
    
    -   the body

-   which parts of code are different?

    -   the neck

## Decomposition

```{python}
#| echo: true
#| eval: false
def print_classic_guitar():
    print_head()
    print_neck()
    print_body()

def print_retro_guitar():
    print_retro_head()
    print_neck()
    print_body()
    
def print_long_guitar():
    print_head()
    print_neck()
    print_neck()
    print_body()

def main():
    print_classic_guitar() # print classic guitar
    print_retro_guitar() # print retro head guitar
    print_long_guitar() # print long neck guitar

main()
```

## Class activity two

Read the code for classic guitar, write your asnwers:

-   which lines of code are the same?

    -   in the head:
    
    -   in the neck:
    
    -   in the body:


## Print a classic guitar

```{python}
#| echo: true
#| eval: false
print("      ___")
print("    o|* *|o")
print("    o|* *|o")
print("    o|* *|o")
print("     \===/")
print("      |||")
print("      |||")
print("   ___|||___")
print("  /   |||   \ ")
print(" /    |||    \ ")
print("|     |||     |")
print(" \   (|||)   /")
print("  |   |||   |")
print("  /   |||   \ ")
print(" /    |||    \ ")
print("/     |||     \ ")
print("|    [===]    |")
print(" \           /")
print("  '.       .'")
print("   '-------'")
```

## Class activity two -- answers

Read the code for classic guitar, answer the questions:

-   which lines of code are the same?

    -   in the head: line 2 - 4
    
    -   in the neck: line 6 - 7
    
    -   in the body: line 9 - 10 and line 14 - 15
    
## Write functions

Write functions `print_head`, `print_neck`, and `print_body`:

```{python}
#| echo: true
#| eval: false
def print_classic_guitar():
    print_head()
    print_neck()
    print_body()

def print_long_guitar():
    print_head()
    print_neck()
    print_neck()
    print_body()

def main():
    print_classic_guitar() # print classic guitar
    print_long_guitar() # print long neck guitar

main()
```

## Write functions -- answers 

```{python}
#| echo: true
#| eval: true
def print_head():
    print("      ___")
    print("    o|* *|o")
    print("    o|* *|o")
    print("    o|* *|o")
    print("     \===/")

def print_neck():
    print("      |||" + "\n" + "      |||")
    
def print_body():
    print("   ___|||___")
    print("  /   |||   \ ")
    print(" /    |||    \ ")
    print("|     |||     |")
    print(" \   (|||)   /")
    print("  |   |||   |")
    print("  /   |||   \ ")
    print(" /    |||    \ ")
    print("/     |||     \ ")
    print("|    [===]    |")
    print(" \           /")
    print("  '.       .'")
    print("   '-------'")

def print_classic_guitar():
    print_head()
    print_neck()
    print_body()

def print_long_guitar():
    print_head()
    print_neck()
    print_neck()
    print_body()

def main():
    print_classic_guitar() # print classic guitar
    print_long_guitar() # print long neck guitar

main()
```

## Write functions -- improved answers

```{python}
#| echo: true
#| eval: true
def print_head():
    print("      ___")
    pattern = "    o|* *|o"
    print(pattern)
    print(pattern)
    print(pattern)
    print("     \===/")

def print_neck():
    print("      |||" + "\n" + "      |||")
    
def print_body():
    print("   ___|||___")
    pattern = "  /   |||   \ " + "\n" + " /    |||    \ " 
    print(pattern)
    print("|     |||     |")
    print(" \   (|||)   /")
    print("  |   |||   |")
    print(pattern)
    print("/     |||     \ ")
    print("|    [===]    |")
    print(" \           /")
    print("  '.       .'")
    print("   '-------'")

def print_classic_guitar():
    print_head()
    print_neck()
    print_body()

def print_long_guitar():
    print_head()
    print_neck()
    print_neck()
    print_body()

def main():
    print_classic_guitar() # print classic guitar
    print_long_guitar() # print long neck guitar

main()
```


## Write a function

Write `print_retro_head`:

```{python}
#| echo: true
#| eval: false
def print_retro_guitar():
    print_retro_head()
    print_neck()
    print_body()

def main():
    print_classic_guitar() # print classic guitar
    print_long_guitar() # print long neck guitar
    print_retro_guitar() # print retro head guitar

main()
```


## Write a function -- answer

```{python}
#| echo: true
#| eval: true
def print_head():
    print("      ___")
    pattern = "    o|* *|o"
    print(pattern)
    print(pattern)
    print(pattern)
    print("     \===/")

def print_retro_head():
    print("     ._-_.")
    print("    +|\G/|+")
    pattern = "    +|\./|+"
    print(pattern)
    print(pattern)
    print("     \===/")

def print_neck():
    print("      |||" + "\n" + "      |||")
    
def print_body():
    print("   ___|||___")
    pattern = "  /   |||   \ " + "\n" + " /    |||    \ " 
    print(pattern)
    print("|     |||     |")
    print(" \   (|||)   /")
    print("  |   |||   |")
    print(pattern)
    print("/     |||     \ ")
    print("|    [===]    |")
    print(" \           /")
    print("  '.       .'")
    print("   '-------'")

def print_classic_guitar():
    print_head()
    print_neck()
    print_body()

def print_retro_guitar():
    print_retro_head()
    print_neck()
    print_body()
    
def print_long_guitar():
    print_head()
    print_neck()
    print_neck()
    print_body()

def main():
    print_classic_guitar() # print classic guitar
    print_retro_guitar() # print retro head guitar
    print_long_guitar() # print long neck guitar

main()
```

## Discussion

Download and run [old guitar file](guitar_old.py) and [new guitar file](guitar_new.py):

-   Which version is more readable?

-   Why it is better?